import os
import json
import logging
from flask import Flask, request, jsonify
from services.query_service import QueryService
import dotenv

# Load environment variables 
dotenv.load_dotenv()


# Configure logging
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    filename='/tmp/websocket_messages.log')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Initialize the query service
query_service = QueryService()

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    return jsonify({"status": "healthy"})

@app.route('/process', methods=['POST'])
def process_message():
    """Process messages sent from Lambda"""
    try:
        # Get message from request body
        data = request.json
        message = data.get('message', '')
        session_id = data.get('session_id', 'default')
        
        logger.info(f"Received message from Lambda: {message}")
        
        # Process the message using the query service
        response_text = query_service.process_query(message, session_id)
        logger.info(f"Output generated by agent: {response_text}")
        
        # Here you would add your vector database and API call logic
        # For now, just return a simple response
        response = {
            "status": "success",
            # "response": f"Hi from EC2. Your message: \"{response_text}\"",
            "response": response_text,
            "processed_by": "ec2"
        }
        
        logger.info(f"Sending response: {response}")
        return jsonify(response)
    except Exception as e:
        logger.error(f"Error processing message: {str(e)}")
        return jsonify({"status": "error", "error": str(e)}), 500

if __name__ == '__main__':
    # For development only - use gunicorn or similar for production
    app.run(host='0.0.0.0', port=5000, debug=True)
